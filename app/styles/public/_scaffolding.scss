//
// Scaffolding
// --------------------------------------------------


// Highlighting

::selection {
  background: rgba($gold, .99);
  color: $black;
}


// Body reset

html {
  font-size: 10px;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}

body {
  background-color: $body-bg;
  background-image: linear-gradient(90deg, lighten($body-bg, 7%), $body-bg);
  color: $text-color;
  display: flex;
  flex-direction: column;
  font-family: $font-family-base;
  font-size: $font-size-base;
  line-height: $line-height-base;
  min-height: 100vh;
  overflow-x: hidden;
  overflow-y: scroll;
  padding-bottom: 32px;
  padding-top: 32px;
  transition: all 600ms cubic-bezier(.23, 1, .32, 1);

  @media (min-width: $screen-sm-min) {
    padding-bottom: 64px;
    padding-top: 64px;
  }

  &:before {
    margin-bottom: 32px;
    padding: 0 32px 32px;

    @media (min-width: $screen-sm-min) {
      margin-bottom: 64px;
      padding: 0 64px 64px;
    }
  }

  > .background {
    background-image: url('../images/background.png');
    background-position: center center;
    height: 100vh;
    margin-top: -32px;
    position: fixed;
    transform: translate3d(0, 0, 0);
    width: 100vw;

    @media (min-width: $screen-sm-min) {
      margin-top: -64px;
    }
  }
}

.grid-flicker.background {
  background-image: url('../images/grid.png');
  background-position: left top;

  &.points {
    background-image: url('../images/grid_point.png');
  }
}

.grid.background {
  background-image: url('../images/grid.png');
  background-position: left top;
}

main {
  display: flex !important;
  flex: 1;
  transform: translate3d(0, 0, 0);

  > .container {
    margin-left: 0;
    margin-right: 0;
    padding: 32px !important;

    @media (min-width: $screen-sm-min) {
      margin-left: auto;
      margin-right: auto;
      padding: 64px !important;
    }
  }
}

// Reset fonts for relevant elements
input,
button,
select,
textarea {
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
}


// Links

a {
  color: $link-color;
  text-decoration: none;
  transition: all 600ms cubic-bezier(.23, 1, .32, 1);

  &:hover,
  &:focus {
    color: $link-hover-color;
    text-decoration: $link-hover-decoration;
  }

  &:focus {
    color: $link-color;
  }
}


// Figures
//
// We reset this here because previously Normalize had no `figure` margins. This
// ensures we don't break anyone's use of the element.

figure {
  margin: 0;
}


// Images

img {
  vertical-align: middle;
}

// Rounded corners
.img-rounded {
  border-radius: $border-radius-large;
}

// Image thumbnails
//
// Heads up! This is mixin-ed into thumbnails.less for `.thumbnail`.
.img-thumbnail {
  background-color: $thumbnail-bg;
  border: 1px solid $thumbnail-border;
  border-radius: $thumbnail-border-radius;
  line-height: $line-height-base;
  padding: $thumbnail-padding;
}

// Perfect circle
.img-circle {
  border-radius: 50%; // set radius in percents
}


// Horizontal rules

hr {
  border: 0;
  border-top: 1px solid $hr-border;
  margin-bottom: $line-height-computed;
  margin-top: $line-height-computed;
}


// Only display content to screen readers
//
// See: http://a11yproject.com/posts/how-to-hide-content/

.sr-only {
  border: 0;
  clip: rect(0, 0, 0, 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

// Use in conjunction with .sr-only to only display content when it's focused.
// Useful for "Skip to main content" links; see http://www.w3.org/TR/2013/NOTE-WCAG20-TECHS-20130905/G1
// Credit: HTML5 Boilerplate

.sr-only-focusable {
  &:active,
  &:focus {
    clip: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static;
    width: auto;
  }
}
